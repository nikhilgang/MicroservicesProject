package com.transaction.controller;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.transaction.entity.OTP;
import com.transaction.entity.Transaction;
import com.transaction.exception.ResourceNotFoundException;
import com.transaction.repo.TransactionRepo;

@RestController
@RequestMapping("/transactionApi")
public class Controller {
	@Autowired
	TransactionRepo transactionRepo;

	@Autowired
	private RestTemplate restTemplate;

	@GetMapping("/allTransactions")
	public List<Transaction> getAllTransactions() {
		return transactionRepo.findAll();
	}

	@GetMapping("/transaction/{id}")
	public ResponseEntity<Transaction> gettransactionById(@PathVariable(value = "id") int transactionId)
			throws ResourceNotFoundException {
		Transaction transaction = transactionRepo.findById(transactionId).orElseThrow(
				() -> new ResourceNotFoundException("transaction not found for this id :: " + transactionId));
		return ResponseEntity.ok().body(transaction);
	}

	@GetMapping("/agent/{id}")
	public List<Transaction> getAgentById(@PathVariable(value = "id") int agentId) {
		List<Transaction> list = transactionRepo.findAll();
		return list.stream().filter(agent -> agent.getAgentId() == agentId).collect(Collectors.toList());
	}

	@GetMapping("/client/{id}")
	public List<Transaction> getClientsById(@PathVariable(value = "id") int clientId) {
		List<Transaction> list = transactionRepo.findAll();
		return list.stream().filter(client -> client.getAgentId() == clientId).collect(Collectors.toList());
	}

	@PostMapping("/fundTransactionSend")
	public ResponseEntity<String> initiate(@RequestBody OTP otp) throws ResourceNotFoundException {
		// transactionRepo.save(transaction);

		String url = "http://OTP/api/generateOTP/";

		ObjectMapper Obj = new ObjectMapper();
		String jsonStr = Obj.writeValueAsString(otp);
		String requestJson = otp;
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);

		HttpEntity<String> entity = new HttpEntity<String>(requestJson, headers);
		String answer = restTemplate.postForObject(url, entity, String.class);
		System.out.println(answer);

		return new ResponseEntity<String>(answer, HttpStatus.OK);

	}

	@PostMapping("/fundTransaction")
	public ResponseEntity<EntityModel<Transaction>> createtransaction(@Valid @RequestBody Transaction transaction)
			throws ResourceNotFoundException {
		transactionRepo.save(transaction);

		this.restTemplate.put("http://Agent-Details/agentApi/fundTransfer/" + transaction.getAgentId() + "/"
				+ transaction.getTransferamount(), Transaction.class);
		this.restTemplate.put("http://Client-Details/clientApi/fundTransfer/" + transaction.getClientId() + "/"
				+ transaction.getTransferamount(), Transaction.class);
		EntityModel<Transaction> resource = EntityModel.of(transaction);
		WebMvcLinkBuilder linkforAllClints = WebMvcLinkBuilder
				.linkTo(WebMvcLinkBuilder.methodOn(this.getClass()).getAllTransactions());

		WebMvcLinkBuilder linkforClintByName = WebMvcLinkBuilder
				.linkTo(WebMvcLinkBuilder.methodOn(this.getClass()).gettransactionById(transaction.getTransactionid()));

		// add link to the resource
		resource.add(linkforAllClints.withRel("Click here to Get All Transactions"));
		resource.add(linkforClintByName.withRel("Click here to get Transaction Info"));
		return new ResponseEntity<EntityModel<Transaction>>(resource, HttpStatus.OK);

	}

}