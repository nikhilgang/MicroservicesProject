package com.transaction.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.transaction.entity.Transaction;
import com.transaction.exception.ResourceNotFoundException;
import com.transaction.repo.TransactionRepo;


@RestController
@RequestMapping("/transactionApi")
public class Controller {
	@Autowired
	TransactionRepo transactionRepo;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@GetMapping("/allTransactions")
    public List<Transaction> getAllTransactions() {
        return transactionRepo.findAll();
    }

    @GetMapping("/transaction/{id}")
    public ResponseEntity<Transaction> gettransactionById(@PathVariable(value = "id") int transactionId)
        throws ResourceNotFoundException {
        Transaction transaction = transactionRepo.findById(transactionId)
          .orElseThrow(() -> new ResourceNotFoundException("transaction not found for this id :: " + transactionId));
        return ResponseEntity.ok().body(transaction);
    }
    
//    @PostMapping("/transaction/{aid}/{cid}")
//    public 
    @GetMapping("/agent/{id}")
    public List<Transaction> getAgentById(@PathVariable(value = "id") int agentId) {
    	List<Transaction> list=transactionRepo.findAll();
    	return list.stream().filter(agent->agent.getAgentId()==agentId).collect(Collectors.toList());
    }
    
    @GetMapping("/client/{id}")
    public List<Transaction> getClientsById(@PathVariable(value = "id") int clientId) {
    	List<Transaction> list=transactionRepo.findAll();
    	return list.stream().filter(client->client.getAgentId()==clientId).collect(Collectors.toList());
    }
    
    @PostMapping("/fundTransaction")
    public ResponseEntity<EntityModel<Transaction>> createtransaction(@Valid @RequestBody Transaction transaction) throws ResourceNotFoundException {
    	transactionRepo.save(transaction);
    	
    	this.restTemplate.put("http://Agent-Details/agentApi/fundTransfer/"+transaction.getAgentId()+"/"+transaction.getTransferamount(),Transaction.class);
    	this.restTemplate.put("http://Client-Details/clientApi/fundTransfer/"+transaction.getClientId()+"/"+transaction.getTransferamount(),Transaction.class);
    	EntityModel<Transaction> resource = EntityModel.of(transaction);
    	WebMvcLinkBuilder linkforAllClints = WebMvcLinkBuilder.linkTo(
		         WebMvcLinkBuilder.methodOn(this.getClass()).getAllTransactions());


		WebMvcLinkBuilder linkforClintByName = WebMvcLinkBuilder.linkTo(
		         WebMvcLinkBuilder.methodOn(this.getClass()).gettransactionById(transaction.getTransactionid()));

		// add link to the resource
		resource.add(linkforAllClints.withRel("Click here to Get All Transactions"));
		resource.add(linkforClintByName.withRel("Click here to get Transaction Info"));
		return new ResponseEntity<EntityModel<Transaction>>(resource,HttpStatus.OK);
  
    }
  
//
//    @PutMapping("/clients/{id}")
//    public ResponseEntity<Transaction> updateclient(@PathVariable(value = "id") int clientId,
//         @Valid @RequestBody Transaction clientDetails) throws ResourceNotFoundException {
//        Transaction client = clientRepo.findById(clientId)
//        .orElseThrow(() -> new ResourceNotFoundException("client not found for this id :: " + clientId));
//
//        client.setClientName(clientDetails.getClientName());
//        client.setClientState(clientDetails.getClientState());
//        client.setBankAccountName(clientDetails.getBankAccountName());
//        final Transaction updatedclient = clientRepo.save(client);
//        return ResponseEntity.ok(updatedclient);
//    }
//
//    @DeleteMapping("/clients/{id}")
//    public Map<String, Boolean> deleteclient(@PathVariable(value = "id") int clientId)
//         throws ResourceNotFoundException {
//        Transaction client = clientRepo.findById(clientId)
//       .orElseThrow(() -> new ResourceNotFoundException("client not found for this id :: " + clientId));
//
//        clientRepo.delete(client);
//        Map<String, Boolean> response = new HashMap<>();
//        response.put("deleted", Boolean.TRUE);
//        return response;
//    }
}